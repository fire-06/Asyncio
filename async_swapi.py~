import asyncio
import aiohttp
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from models import Character, init_db

DATABASE_URL = "postgresql+asyncpg://user:password@localhost:5432/swapi_db"

# Настройка асинхронного движка и сессии
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

async def fetch_character(session, url):
    async with session.get(url) as response:
        return await response.json()

async def process_character_data(character_data):
    # Здесь обрабатываем данные, например, получаем названия фильмов, звездолетов и т.д.
    return {
        "id": character_data.get("id"),
        "birth_year": character_data.get("birth_year"),
        "eye_color": character_data.get("eye_color"),
        "films": ", ".join(character_data.get("films", [])),
        # Дополните остальными полями
    }

async def fetch_and_save_character(character_id):
    url = f"https://swapi.dev/api/people/{character_id}/"
    async with aiohttp.ClientSession() as session:
        character_data = await fetch_character(session, url)
        processed_data = await process_character_data(character_data)

        async with async_session() as session:
            async with session.begin():
                character = Character(**processed_data)
                session.add(character)

async def main():
    await init_db()
    tasks = [fetch_and_save_character(i) for i in range(1, 100)]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
